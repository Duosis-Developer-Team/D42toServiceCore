# send-to-smax.yaml
---
- name: Insert Device42 devices into SMAX
  hosts: localhost
  gather_facts: false

  vars:
    limit: "{{ limit | default(omit) }}"  # Opsiyonel limit değişkeni

  pre_tasks:
    - name: Build Device42 API URL with optional limit
      set_fact:
        device42_final_url: >-
          {{ device42_api_url }}{% if limit is defined and limit is not none and limit != '' %}?limit={{ limit }}{% endif %}

  tasks:
    - name: Fetch devices from Device42
      uri:
        url: "{{ device42_final_url }}"
        method: GET
        headers:
          Authorization: "{{ device42_auth_header }}"
        return_content: yes
        status_code: 200
        validate_certs: no
      register: device42_response
      when: device42_api_url is defined and device42_auth_header is defined

    - name: Fail if Device42 variables are not provided
      fail:
        msg: "device42_api_url and device42_auth_header must be provided in AWX Extra Vars"
      when: device42_api_url is not defined or device42_auth_header is not defined

    - name: Extract device list
      set_fact:
        devices: "{{ device42_response.json.Devices | default(device42_response.json.devices) }}"
      when: device42_response is defined

    - name: Process device data and add IP information
      set_fact:
        processed_devices: "{{ devices | map('combine', {'processed_ips': item.ip_addresses | default([]) + [item.ip_address | default('')] + [item.primary_ip | default('')] | select('string') | list | unique}) }}"
      when: devices is defined

    - name: Show sample processed device data
      debug:
        var: processed_devices[0:3]
      when: processed_devices is defined

    - name: Get SMAX token
      uri:
        url: "{{ smax_token_url }}"
        method: POST
        headers:
          Content-Type: "application/json"
        body: "{{ { 'Login': smax_user, 'Password': smax_pass } | to_json }}"
        return_content: yes
        status_code: 200
        validate_certs: no
      register: smax_token_response
      when: smax_token_url is defined and smax_user is defined and smax_pass is defined

    - name: Extract token
      set_fact:
        smax_token: "{{ smax_token_response.content }}"
      when: smax_token_response is defined and smax_token_response.content is defined
      register: token_extraction_result
      ignore_errors: yes

    - name: Fail if token extraction failed
      fail:
        msg: "Failed to extract token from SMAX response. Response content: {{ smax_token_response.content }}"
      when: token_extraction_result is failed

    - name: Show CPU speed and mac_addresses
      debug:
        msg: "cpuspeed: {{ item.cpuspeed }}, cpu_speed: {{ item.cpu_speed }}, mac_addresses: {{ item.mac_addresses }}"
      when: item is defined

    - name: Send each device to SMAX
      vars:
        device_payload:
          entities:
            - entity_type: "Device"
              properties:
                SubType: "Server"
                MemorySize: "{{ (item.ram | default(0)) | int }}"
#                Memory: "{{ item.ram | default(item.memory | default(0)) }}"
#                AssetTag: "{{ item.asset_no | default('D42_' + (item.device_id | default(item.id) | string)) }}"
                BiosSerialNumber: "{{ item.serial_no | default('') }}"
                BiosUUID: "{{ item.uuid | default('') }}"
                HostName: "{{ item.name | default('') }}"
                D42id_c: "{{ item.device_id | default(item.id) | default('') }}"
                OsName: "{{ item.os | default('') }}"
                # IP Addresses - use first available IP
                IpAddresses: "{{ {'IpAddress': [ { 'IpValue': (item.processed_ips | default([]) | select('string') | list)[0] | default(item.ip_address | default(item.primary_ip | default(''))), 'IpType': '', 'AuthoritativeDNSName': '', 'RoutingDomain': '', 'GlobalId': '', 'Keep': '', 'Id': '' } ] } | to_json }}"
                # CPU Information
                Cpus: "{{ {'Cpu': [ { 'CpuType': item.cpu_model | default(''), 'CpuVendor': item.cpu_vendor | default(''), 'CpuClockSpeed': (item.cpuspeed | default('') | string), 'CpuId': '1', 'CpuCoreNumber': item.cpu_count | default(item.cpus | default(1)), 'GlobalId': '', 'Keep': '', 'Id': '' } ] } | to_json }}"
                # Disk Information
                DiskDevices: "{{ {'DiskDevice': [ { 'DiskName': '', 'DiskSize': (item.hdd_size | default(item.disk_size | default(0))) | string, 'DiskModelName': 'scsi', 'DiskVendor': '', 'DiskType': 'virtual', 'GlobalId': '', 'Keep': '', 'Id': '' } ] } | to_json }}"
                # Additional properties
#                Status: "{{ item.status | default('In Service') }}"
                # NetworkCards: mac_addresses içindeki her bir eleman için MacAddress ve Name alanlarını doldur
                Vendor: "{{ item.manufacturer | default('') }}"
                Model: "{{ item.hw_model | default('') }}"
                Environment: "{{ item.service_level | default('') }}"
                NetworkCards: "[{% for mac in item.mac_addresses | default([]) %}{\"MacAddress\": \"{{ mac.mac | default('') }}\", \"Name\": \"{{ mac.port_name | default('') }}\"}{% if not loop.last %},{% endif %}{% endfor %}]"
          operation: "CREATE"
      uri:
        url: "{{ smax_api_url }}"
        method: POST
        headers:
          Cookie: "SMAX_AUTH_TOKEN={{ smax_token }}"
          Content-Type: "application/json"
        body: "{{ device_payload | to_json }}"
        body_format: raw
        status_code: 200,201,202
        validate_certs: no
        return_content: yes
      loop: "{{ processed_devices }}"
      loop_control:
        index_var: idx
        label: "device_{{ idx }}"
      register: smax_responses
      when: processed_devices is defined and smax_token is defined

    - name: Show SMAX response summary
      debug:
        msg: "Device {{ item.item.name }} - Status: {{ item.status }} - Success: {{ item.json.meta.completion_status if item.json.meta is defined else 'Unknown' }}"
      loop: "{{ smax_responses.results }}"
      loop_control:
        index_var: rsp_idx
        label: "summary_{{ rsp_idx }}"
      when: smax_responses is defined

    - name: Show detailed SMAX response for failed devices
      debug:
        msg: |
          ===== FAILED DEVICE DETAILS =====
          Device Name: {{ item.item.name }}
          Device ID: {{ item.item.device_id | default(item.item.id) }}
          Status Code: {{ item.status }}
          Full Response: {{ item.json | to_nice_json }}
          ================================
      loop: "{{ smax_responses.results }}"
      when: 
        - smax_responses is defined
        - item.json.meta.completion_status is defined
        - item.json.meta.completion_status == "FAILED"
      loop_control:
        index_var: failed_idx
        label: "failed_device_{{ failed_idx }}"

    - name: Show payload sent for failed devices
      debug:
        msg: |
          ===== PAYLOAD SENT FOR FAILED DEVICE =====
          Device Name: {{ item.item.name }}
          Payload: {{ item.item.payload | default('No payload found') | to_nice_json }}
          =========================================
      loop: "{{ smax_responses.results }}"
      when: 
        - smax_responses is defined
        - item.json.meta.completion_status is defined
        - item.json.meta.completion_status == "FAILED"
      loop_control:
        index_var: payload_idx
        label: "payload_{{ payload_idx }}"

    - name: Show successful devices count
      debug:
        msg: "Successfully created {{ smax_responses.results | selectattr('json.meta.completion_status', 'equalto', 'OK') | list | length }} devices out of {{ smax_responses.results | length }} total devices"
      when: smax_responses is defined

    - name: Show failed devices count
      debug:
        msg: "Failed to create {{ smax_responses.results | selectattr('json.meta.completion_status', 'equalto', 'FAILED') | list | length }} devices"
      when: smax_responses is defined

    - name: Show device processing summary
      debug:
        msg: "Processed {{ processed_devices | length }} devices with IP information for SMAX integration"
      when: processed_devices is defined

    - name: Show all SMAX response headers for debugging
      debug:
        msg: |
          ===== RESPONSE HEADERS FOR DEVICE {{ item.item.name }} =====
          Headers: {{ item.headers | default('Yok') | to_nice_json }}
          ===========================================
      loop: "{{ smax_responses.results }}"
      when: 
        - smax_responses is defined
        - item.json.meta.completion_status is defined
        - item.json.meta.completion_status == "FAILED"
      loop_control:
        index_var: header_idx
        label: "headers_{{ header_idx }}"
