# send-to-smax.yaml
---
- name: Insert Device42 devices into SMAX
  hosts: localhost
  gather_facts: false

  tasks:
    - name: Fetch devices from Device42
      uri:
        url: "{{ device42_api_url }}"
        method: GET
        headers:
          Authorization: "{{ device42_auth_header }}"
        return_content: yes
        status_code: 200
        validate_certs: no
      register: device42_response
      when: device42_api_url is defined and device42_auth_header is defined

    - name: Fail if Device42 variables are not provided
      fail:
        msg: "device42_api_url and device42_auth_header must be provided in AWX Extra Vars"
      when: device42_api_url is not defined or device42_auth_header is not defined

    - name: Extract device list
      set_fact:
        devices: "{{ device42_response.json.Devices | default(device42_response.json.devices) }}"
      when: device42_response is defined

    - name: Get SMAX token
      uri:
        url: "{{ smax_token_url }}"
        method: POST
        headers:
          Content-Type: "application/json"
        body: "{{ { 'Login': smax_user, 'Password': smax_pass } | to_json }}"
        return_content: yes
        status_code: 200
        validate_certs: no
      register: smax_token_response
      when: smax_token_url is defined and smax_user is defined and smax_pass is defined

    - name: Extract token
      set_fact:
        smax_token: "{{ smax_token_response.content }}"
      when: smax_token_response is defined and smax_token_response.content is defined
      register: token_extraction_result
      ignore_errors: yes

    - name: Fail if token extraction failed
      fail:
        msg: "Failed to extract token from SMAX response. Response content: {{ smax_token_response.content }}"
      when: token_extraction_result is failed

    - name: Send each device to SMAX
      vars:
        device_payload:
          entities:
            - entity_type: "Device"
              properties:
                SubType: "Server"
                MemorySize: {{ item.ram | default(0) }}
                AssetTag: "{{ item.asset_no | default('D42_' + (item.device_id | default(item.id) | string)) }}"
                BiosSerialNumber: "{{ item.serial_no | default('') }}"
                HostName: "{{ item.name | default('') }}"
                D42id_c: "{{ item.device_id | default(item.id) | default('') }}"
                OsName: "{{ item.os | default('') }}"
          operation: "CREATE"
      uri:
        url: "{{ smax_api_url }}"
        method: POST
        headers:
          Cookie: "SMAX_AUTH_TOKEN={{ smax_token }}"
          Content-Type: "application/json"
        body: "{{ device_payload | to_json }}"
        body_format: raw
        status_code: 200,201,202
        validate_certs: no
        return_content: yes
      loop: "{{ devices }}"
      loop_control:
        index_var: idx
        label: "device_{{ idx }}"
      register: smax_responses
      when: devices is defined and smax_token is defined

    - name: Show SMAX response summary
      debug:
        msg: "Device {{ item.item.name }} - Status: {{ item.status }} - Success: {{ item.json.meta.completion_status if item.json.meta is defined else 'Unknown' }}"
      loop: "{{ smax_responses.results }}"
      loop_control:
        index_var: rsp_idx
        label: "summary_{{ rsp_idx }}"
      when: smax_responses is defined
