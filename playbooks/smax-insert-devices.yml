# send-to-smax.yaml
---
- name: Insert Device42 devices into SMAX
  hosts: localhost
  gather_facts: false

  vars:
    device42_api_url: "{{ device42_api_url }}"  # AWX Extra Vars input
    device42_auth_header: "{{ device42_auth_header }}"  # AWX Extra Vars input
    smax_token_url: "{{ smax_token_url }}"  # AWX Extra Vars input
    smax_user: "{{ smax_user }}"            # AWX Extra Vars input
    smax_pass: "{{ smax_pass }}"            # AWX Extra Vars input
    smax_api_url: "{{ smax_api_url }}"      # AWX Extra Vars input
    chunk_size: "{{ chunk_size | default(1) }}"  # AWX Extra Vars input, default 1

  tasks:
    - name: Fetch devices from Device42
      uri:
        url: "{{ device42_api_url }}"
        method: GET
        headers:
          Authorization: "{{ device42_auth_header }}"
        return_content: yes
        status_code: 200
        validate_certs: no
      register: device42_response

    - name: Extract device list
      set_fact:
        devices: "{{ device42_response.json.Devices | default(device42_response.json.devices) }}"

    - name: Split devices into chunks
      set_fact:
        device_chunks: "{{ devices | batch(chunk_size | int, []) }}"

    - name: Show number of chunks created
      debug:
        msg: "{{ device_chunks | length }} chunks created for SMAX processing."

    - name: Get SMAX token
      uri:
        url: "{{ smax_token_url }}"
        method: POST
        headers:
          Content-Type: "application/json"
        body: "{{ { 'Login': smax_user, 'Password': smax_pass } | to_json }}"
        return_content: yes
        status_code: 200
        validate_certs: no
      register: smax_token_response

    - name: Extract token
      set_fact:
        smax_token: "{{ (smax_token_response.content | from_json).token }}"

    - name: Send each chunk to SMAX
      vars:
        smax_payload: |
          {
            "entities": [
              {% for device in item %}
              {
                "entity_type": "Device",
                "properties": {
                  "HostName": "{{ device.name | default('') }}",
                  "MemorySize": {{ device.ram | default(0) }},
                  "AssetTag": "{{ device.asset_no | default('') }}",
                  "Cpus": "{{ {'Cpu':[{
                    'CpuType':'',
                    'CpuVendor':'',
                    'CpuClockSpeed': (device.cpuspeed|default(''))|string,
                    'CpuId':'',
                    'CpuCoreNumber': (device.cpucore|default(device.cpucount|default(0)))|string
                  }]} | to_json }}",
                  "IpAddresses": "{{ {'IpAddress':[{'IpValue': (device.ip_addresses[0].ip if device.ip_addresses|length > 0 else ''),'IpType':'','AuthoritativeDNSName':'','RoutingDomain':'','GlobalId':'','Keep':'','Id':''}]} | to_json }}",
                  "SerialNo": "{{ device.serial_no | default('') }}",
                  "OSName": "{{ device.os | default('') }}",
                  "OSVersion": "{{ device.osver | default('') }}",
                  "Category": "{{ device.category | default('') }}"
                }
              }{% if not loop.last %},{% endif %}
              {% endfor %}
            ],
            "operation": "CREATE"
          }
      uri:
        url: "{{ smax_api_url }}"
        method: POST
        headers:
          Cookie: "SMAX_AUTH_TOKEN={{ smax_token }}"
          Content-Type: "application/json"
        body: "{{ smax_payload }}"
        status_code: 200,201,202
        validate_certs: no
      loop: "{{ device_chunks }}"
      loop_control:
        index_var: idx
        label: "chunk_{{ idx }}"
      register: smax_responses

    - name: Show SMAX responses
      debug:
        var: item
      loop: "{{ smax_responses.results }}"
      loop_control:
        index_var: rsp_idx
        label: "response_{{ rsp_idx }}"
